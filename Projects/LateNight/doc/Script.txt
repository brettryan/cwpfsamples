
This is a real rough script I'm using to develop the application, it will be
the basis for how to create this demo in the future.


Create base solution
--------------------
 1. Create a new empty solution named 'LateNight'
 2. Create the following solutions folders
    - Application
    - Modules
 3. Create a WPF application Project named LateNight in "Application"
    solution folder.
 4. Open Properties for LateNight and change default namespace to
    BrettRyan.LateNight.
 5. Add an infrastructure project called "LateNight.Infrastructure" in
    "Application" solution folder.
 6. Open properties for LateNight.Infrastructure and change default namespace to
    "BrettRyan.LateNight.Infrastructure".
 7. Add a reference to LateNight.Infrastructure to the LateNight project.
 8. Delete default "Class1.cs" from LateNight.Infrastructure.
 9. Open properties for LateNight, navigate to the build tab and change the
    output location to "..\Build\Debug" for the Debug build and
    "..\Build\Release" for the release build.
10. Perform step #7 for the LateNight.Infrastructure project.


Make Application CAL (Composite Application Library?) Ready
-----------------------------------------------------------
 1. Add the following library references to LateNight
    - Microsoft.Practices.Composite
    - Microsoft.Practices.Composite.UnityExtensions
    - Microsoft.Practices.Composite.Wpf
    - Microsoft.Practices.ObjectBuilder2
    - Microsoft.Practices.Unity
 2. Remove default "Window1.xaml" and associated code behind file.
 3. Remove reference to "StartupUri" property in App.xaml
 4. Create a new WPF window called LateNightShell.xaml.
 5. Create a new class called LateNightBootstrapper.
 6. Add the following using statements.

using System.Windows;
using Microsoft.Practices.Composite.Modularity;
using Microsoft.Practices.Composite.UnityExtensions;

 7. Alter the class signature to extend from "UnityBootstrapper".
 8. Right click "UnityBootstrapper" and choose "Implement Abstract Class".
 9. Replace the CreateShell() implementation with the following:
 
    LateNightShell shell = Container.Resolve<LateNightShell>();
    shell.Show();
    return shell;

10. Override the GetModuleEnumerator() method with the following implementation

    ConfigurationStore store = new ConfigurationStore();
    return new ConfigurationModuleEnumerator(store);

    (NOTE:) this configures the module enumerator to use the implementation
    that reads your application settings file (App.config).
    
11. Add a new application configuration file to LateNight (App.config).
12. Open App.config and add the following inside the <configuration> tag:

  <configSections>
    <section name="modules"
             type="Microsoft.Practices.Composite.Modularity.ModulesConfigurationSection, Microsoft.Practices.Composite"/>
  </configSections>

  <modules>
  </modules>
  
13. Open App.xaml
14. Change the namespace to the x:Class tag to be BrettRyan.LateNight.
15. Open the App.xaml code behind file (App.xaml.cs).
16. Alter the namespace to be "BrettRyan.LateNight".
17. Add a default constrcutor (App()) with the following implementation:

    LateNightBootstrapper bootStrapper = new LateNightBootstrapper();
    bootStrapper.Run();


Create a Shell Layout
---------------------

 1. Open LateNightShell.xaml and replace the contents with the following
 
 >>>> LateNightShell.xaml
 <Window
    x:Class="BrettRyan.LateNight.LateNightShell"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Title="Late Night" Width="640" Height="480">

    <DockPanel>
        <StackPanel DockPanel.Dock="Top">
            <StackPanel Orientation="Horizontal"
                        VerticalAlignment="Center">
                <StackPanel.Background>
                    <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
                        <GradientStop Color="#FF293262" Offset="0"/>
                        <GradientStop Color="#FF5A6DCD" Offset="0.4"/>
                        <GradientStop Color="#FF5A6DCD" Offset="0.6"/>
                        <GradientStop Color="#FF293262" Offset="1"/>
                    </LinearGradientBrush>
                </StackPanel.Background>
                <Label Foreground="#FFC3C9E9"
                       FontWeight="Normal"
                       FontSize="16"
                       FontFamily="Calibri"
                       Content="Late Night"/>
                <Label Foreground="Orange"
                       FontWeight="Normal"
                       FontSize="16"
                       FontFamily="Calibri"
                       Content="v0.1"/>
            </StackPanel>
            <Menu>
                <MenuItem Header="_File">
                    <MenuItem Header="E_xit"/>
                </MenuItem>
                <MenuItem Header="_Help">
                    <MenuItem Header="_About"/>
                </MenuItem>
            </Menu>
            <Border Height="5">
                <Border.Background>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#FF525252" Offset="0"/>
                        <GradientStop Color="#00FFFFFF" Offset="1"/>
                    </LinearGradientBrush>
                </Border.Background>
            </Border>
        </StackPanel>

        <StatusBar Height="23" DockPanel.Dock="Bottom" Foreground="#FFE9EEF0">
            <StatusBar.Background>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FF484B4D" Offset="0"/>
                    <GradientStop Color="#FFFFFFFF" Offset="0.01"/>
                    <GradientStop Color="#FF787B7D" Offset="0.014"/>
                    <GradientStop Color="#FF3A3E42" Offset="0.5"/>
                    <GradientStop Color="#FF04090F" Offset="0.5"/>
                </LinearGradientBrush>
            </StatusBar.Background>
            <StatusBarItem Content="Ready"/>
        </StatusBar>

        <Grid>
            <Grid.Background>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFF2F2F2" Offset="0"/>
                    <GradientStop Color="#FF717477" Offset="0.346"/>
                </LinearGradientBrush>
            </Grid.Background>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="175" Width="Auto"/>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition MinWidth="100" Width="*"/>
            </Grid.ColumnDefinitions>

            <TabControl Grid.Column="0" Margin="5"/>

            <GridSplitter Grid.Column="1" Width="5"
                          Margin="0,35,0,10"
                          ResizeBehavior="PreviousAndNext"
                          ResizeDirection="Columns"
                          Background="#FFF0F0F0"
                          BorderBrush="#FF8C8E94"
                          BorderThickness="1,1,1,1" />

            <TabControl Grid.Column="2" Margin="5"/>

        </Grid>

    </DockPanel>

</Window>
<<<< LateNightShell.xaml


(Optional) Make the Menu Auto-hide
----------------------------------
In order to make the menu in the application hide like in IE7, follow this
procedure.

* TODO: Code isn't perfect just yet.

 1. Open LateNightShell.xaml view and add the following tags to the "Window"
    element.
    
    KeyDown="DoKeyDownHandler"
    KeyUp="DoKeyUpHandler"
    
 2. Give the <Menu> element a name of 'xMainMenu', set the initial Visibility
    to Collapsed and add an event handler for 'IsKeyboardFocusWithinChanged'.
 
    <Menu x:Name="xMainMenu" Visibility="Collapsed"
          IsKeyboardFocusWithinChanged="DoMenuLostFocus">

 3. Open the shells code-behind file (LateNightShell.xaml.cs) and add the
    following event handler implementations.
    
        private void DoKeyDownHandler(object sender, KeyEventArgs e) {
            if (!xMainMenu.HasItems) {
                return;
            }
            if (xMainMenu.Visibility == Visibility.Visible) {
                return;
            }
            if ((e.KeyboardDevice.Modifiers & ModifierKeys.Alt) == ModifierKeys.Alt) {
                xMainMenu.Visibility = Visibility.Visible;
            }
        }

        private void DoKeyUpHandler(object sender, KeyEventArgs e) {
            if (xMainMenu.IsKeyboardFocusWithin) {
                return;
            }
            if ((e.KeyboardDevice.Modifiers & ModifierKeys.Alt) == ModifierKeys.Alt) {
                return;
            }
            xMainMenu.Visibility = Visibility.Collapsed;
        }

        private void DoMenuLostFocus(object sender, DependencyPropertyChangedEventArgs e) {
            if (!xMainMenu.IsKeyboardFocusWithin) {
                if (xMainMenu.Visibility != Visibility.Visible) {
                    return;
                }
                xMainMenu.Visibility = Visibility.Collapsed;
            }
        }

As a note I'd like to mention that this section shows the distinction between
UI specific code and module/model/application code. Take note as to how the
code within the code-behind file only refers to UI elements and nothing more,
It's purely "Eye Candy" type code which maybe your design tem may have
implemented.

(Optional) Make Versions Build Time Aware
-----------------------------------------
